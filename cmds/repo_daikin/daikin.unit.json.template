{
  "name": "DAIKIN_UNIT", 
  "created": 1510038411, 
  "roomID": 0, 
  "enabled": true, 
  "modified": 1510038411, 
  "actions": {
    "setProperty": 2, 
    "setSlider": 2, 
    "pressButton": 1
  }, 
  "properties": {
    "rows": [
      {
        "elements": [
          {
            "name": "Button11", 
            "caption": "On", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'on'\nlocal argText = ''\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": true, 
            "id": 1, 
            "empty": false
          }, 
          {
            "name": "Button12", 
            "caption": "Off", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'off'\nlocal argText = ''\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 2, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button201", 
            "caption": "\u669632\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 3, 
            "empty": false
          }, 
          {
            "name": "Button202", 
            "caption": "\u669632\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 4, 
            "empty": false
          }, 
          {
            "name": "Button203", 
            "caption": "\u669632\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 5, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button191", 
            "caption": "\u669631\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 6, 
            "empty": false
          }, 
          {
            "name": "Button192", 
            "caption": "\u669631\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 7, 
            "empty": false
          }, 
          {
            "name": "Button193", 
            "caption": "\u669631\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 8, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button181", 
            "caption": "\u669630\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 9, 
            "empty": false
          }, 
          {
            "name": "Button182", 
            "caption": "\u669630\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 10, 
            "empty": false
          }, 
          {
            "name": "Button183", 
            "caption": "\u669630\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 11, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button171", 
            "caption": "\u669629\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 12, 
            "empty": false
          }, 
          {
            "name": "Button172", 
            "caption": "\u669629\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 13, 
            "empty": false
          }, 
          {
            "name": "Button173", 
            "caption": "\u669629\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 14, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button161", 
            "caption": "\u669628\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 15, 
            "empty": false
          }, 
          {
            "name": "Button162", 
            "caption": "\u669628\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 16, 
            "empty": false
          }, 
          {
            "name": "Button163", 
            "caption": "\u669628\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 17, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button151", 
            "caption": "\u669627\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 18, 
            "empty": false
          }, 
          {
            "name": "Button152", 
            "caption": "\u669627\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 19, 
            "empty": false
          }, 
          {
            "name": "Button153", 
            "caption": "\u669627\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 20, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button141", 
            "caption": "\u669626\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 21, 
            "empty": false
          }, 
          {
            "name": "Button142", 
            "caption": "\u669626\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 22, 
            "empty": false
          }, 
          {
            "name": "Button143", 
            "caption": "\u669626\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 23, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button21", 
            "caption": "\u669625\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 24, 
            "empty": false
          }, 
          {
            "name": "Button22", 
            "caption": "\u669625\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 25, 
            "empty": false
          }, 
          {
            "name": "Button23", 
            "caption": "\u669625\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 26, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button31", 
            "caption": "\u669624\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 27, 
            "empty": false
          }, 
          {
            "name": "Button32", 
            "caption": "\u669624\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 28, 
            "empty": false
          }, 
          {
            "name": "Button33", 
            "caption": "\u669624\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 29, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button41", 
            "caption": "\u669623\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 30, 
            "empty": false
          }, 
          {
            "name": "Button42", 
            "caption": "\u669623\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 31, 
            "empty": false
          }, 
          {
            "name": "Button43", 
            "caption": "\u669623\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 32, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button51", 
            "caption": "\u669622\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 33, 
            "empty": false
          }, 
          {
            "name": "Button52", 
            "caption": "\u669622\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 34, 
            "empty": false
          }, 
          {
            "name": "Button53", 
            "caption": "\u669622\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 35, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button61", 
            "caption": "\u669621\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 36, 
            "empty": false
          }, 
          {
            "name": "Button62", 
            "caption": "\u669621\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 37, 
            "empty": false
          }, 
          {
            "name": "Button63", 
            "caption": "\u669621\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 38, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button211", 
            "caption": "\u669620\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 39, 
            "empty": false
          }, 
          {
            "name": "Button212", 
            "caption": "\u669620\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 40, 
            "empty": false
          }, 
          {
            "name": "Button213", 
            "caption": "\u669620\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 41, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button221", 
            "caption": "\u669619\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 42, 
            "empty": false
          }, 
          {
            "name": "Button222", 
            "caption": "\u669619\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 43, 
            "empty": false
          }, 
          {
            "name": "Button223", 
            "caption": "\u669619\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 44, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button231", 
            "caption": "\u669618\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 45, 
            "empty": false
          }, 
          {
            "name": "Button232", 
            "caption": "\u669618\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 46, 
            "empty": false
          }, 
          {
            "name": "Button233", 
            "caption": "\u669618\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 47, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button241", 
            "caption": "\u669617\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 48, 
            "empty": false
          }, 
          {
            "name": "Button242", 
            "caption": "\u669617\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 49, 
            "empty": false
          }, 
          {
            "name": "Button243", 
            "caption": "\u669617\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 50, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button251", 
            "caption": "\u669616\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,4096,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 51, 
            "empty": false
          }, 
          {
            "name": "Button252", 
            "caption": "\u669616\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,12288,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 52, 
            "empty": false
          }, 
          {
            "name": "Button253", 
            "caption": "\u669616\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '1,20480,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 53, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button321", 
            "caption": "\u51b732\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 54, 
            "empty": false
          }, 
          {
            "name": "Button322", 
            "caption": "\u51b732\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 55, 
            "empty": false
          }, 
          {
            "name": "Button323", 
            "caption": "\u51b732\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,32'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 56, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button311", 
            "caption": "\u51b731\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 57, 
            "empty": false
          }, 
          {
            "name": "Button312", 
            "caption": "\u51b731\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 58, 
            "empty": false
          }, 
          {
            "name": "Button313", 
            "caption": "\u51b731\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,31'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 59, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button301", 
            "caption": "\u51b730\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 60, 
            "empty": false
          }, 
          {
            "name": "Button302", 
            "caption": "\u51b730\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 61, 
            "empty": false
          }, 
          {
            "name": "Button303", 
            "caption": "\u51b730\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,30'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 62, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button291", 
            "caption": "\u51b729\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 63, 
            "empty": false
          }, 
          {
            "name": "Button292", 
            "caption": "\u51b729\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 64, 
            "empty": false
          }, 
          {
            "name": "Button293", 
            "caption": "\u51b729\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,29'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 65, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button281", 
            "caption": "\u51b728\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 66, 
            "empty": false
          }, 
          {
            "name": "Button282", 
            "caption": "\u51b728\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 67, 
            "empty": false
          }, 
          {
            "name": "Button283", 
            "caption": "\u51b728\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,28'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 68, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button271", 
            "caption": "\u51b727\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 69, 
            "empty": false
          }, 
          {
            "name": "Button272", 
            "caption": "\u51b727\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 70, 
            "empty": false
          }, 
          {
            "name": "Button273", 
            "caption": "\u51b727\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,27'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 71, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button261", 
            "caption": "\u51b726\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 72, 
            "empty": false
          }, 
          {
            "name": "Button262", 
            "caption": "\u51b726\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 73, 
            "empty": false
          }, 
          {
            "name": "Button263", 
            "caption": "\u51b726\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,26'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 74, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button71", 
            "caption": "\u51b725\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 75, 
            "empty": false
          }, 
          {
            "name": "Button72", 
            "caption": "\u51b725\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 76, 
            "empty": false
          }, 
          {
            "name": "Button73", 
            "caption": "\u51b725\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,25'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 77, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button81", 
            "caption": "\u51b724\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 78, 
            "empty": false
          }, 
          {
            "name": "Button82", 
            "caption": "\u51b724\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 79, 
            "empty": false
          }, 
          {
            "name": "Button83", 
            "caption": "\u51b724\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,24'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 80, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button91", 
            "caption": "\u51b723\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 81, 
            "empty": false
          }, 
          {
            "name": "Button92", 
            "caption": "\u51b723\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 82, 
            "empty": false
          }, 
          {
            "name": "Button93", 
            "caption": "\u51b723\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,23'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 83, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button101", 
            "caption": "\u51b722\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 84, 
            "empty": false
          }, 
          {
            "name": "Button102", 
            "caption": "\u51b722\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 85, 
            "empty": false
          }, 
          {
            "name": "Button103", 
            "caption": "\u51b722\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,22'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 86, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button111", 
            "caption": "\u51b721\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 87, 
            "empty": false
          }, 
          {
            "name": "Button112", 
            "caption": "\u51b721\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 88, 
            "empty": false
          }, 
          {
            "name": "Button113", 
            "caption": "\u51b721\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,21'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 89, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button331", 
            "caption": "\u51b720\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 90, 
            "empty": false
          }, 
          {
            "name": "Button332", 
            "caption": "\u51b720\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 91, 
            "empty": false
          }, 
          {
            "name": "Button333", 
            "caption": "\u51b720\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,20'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 92, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button341", 
            "caption": "\u51b719\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 93, 
            "empty": false
          }, 
          {
            "name": "Button342", 
            "caption": "\u51b719\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 94, 
            "empty": false
          }, 
          {
            "name": "Button343", 
            "caption": "\u51b719\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,19'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 95, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button351", 
            "caption": "\u51b718\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 96, 
            "empty": false
          }, 
          {
            "name": "Button352", 
            "caption": "\u51b718\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 97, 
            "empty": false
          }, 
          {
            "name": "Button353", 
            "caption": "\u51b718\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,18'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 98, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button361", 
            "caption": "\u51b717\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 99, 
            "empty": false
          }, 
          {
            "name": "Button362", 
            "caption": "\u51b717\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 100, 
            "empty": false
          }, 
          {
            "name": "Button363", 
            "caption": "\u51b717\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,17'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 101, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button371", 
            "caption": "\u51b716\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,4096,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 102, 
            "empty": false
          }, 
          {
            "name": "Button372", 
            "caption": "\u51b716\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,12288,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 103, 
            "empty": false
          }, 
          {
            "name": "Button373", 
            "caption": "\u51b716\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '2,20480,16'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 104, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button121", 
            "caption": "\u9664\u6fd5\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '7,4096'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 105, 
            "empty": false
          }, 
          {
            "name": "button_35_0", 
            "caption": "\u9664\u6fd5\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '7,12288'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 106, 
            "empty": false
          }, 
          {
            "name": "Button123", 
            "caption": "\u9664\u6fd5\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '7,20480'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 107, 
            "empty": false
          }
        ], 
        "type": "button"
      }, 
      {
        "elements": [
          {
            "name": "Button131", 
            "caption": "\u9001\u98a8\u5c0f", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '0,4096'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 108, 
            "empty": false
          }, 
          {
            "name": "Button132", 
            "caption": "\u9001\u98a8\u4e2d", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '0,12288'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 109, 
            "empty": false
          }, 
          {
            "name": "Button133", 
            "caption": "\u9001\u98a8\u5927", 
            "favourite": false, 
            "buttonIcon": 0, 
            "waitForResponse": false, 
            "lua": true, 
            "msg": "--[[\nOP_MODE_ID_FAN = 0x00\nOP_MODE_ID_HEATING = 0x01\nOP_MODE_ID_COOLING = 0x02\nOP_MODE_ID_AUTO = 0x03\nOP_MODE_ID_SETPOINT = 0x06\nOP_MODE_ID_DRY = 0x07\n\nFAN_VOLUME_ID_LOW = 0x1000\nFAN_VOLUME_ID_MEDIUM = 0x3000\nFAN_VOLUME_ID_HIGHT = 0x0500\n\n]]--\n\nlocal cmdText = 'set_indoor_unit_compond'\nlocal argText = '0,20480'\n\n--gIsBusy = \"SAPORO_IsBusy\"\n--mSyncButton = \"14\"\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\n-- set VD busy\n--fibaro:setGlobal( gIsBusy , \"true\" )\n--Trace( 'VD set Busy' )\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal devAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nlocal datas = split(devAddress, \":\")\nlocal ipAddress = datas[1]\nlocal mid = datas[2]\nlocal uid = datas[3]\nTrace('socket ip:' .. ipAddress .. ', port:' .. tcpPort .. ', mid:' .. mid .. ', uid:' .. uid)\n\nlocal funcCmd = cmdText .. ',' .. mid .. ',' .. uid\nif argText ~= '' then\n    Trace('argText:' .. argText)\n    funcCmd = funcCmd .. ',' .. argText\nend\nTrace('funcCmd: ' .. funcCmd)\n\nlocal socket\nlocal status , err = pcall(\n    function() \n        socket = Net.FTcpSocket( ipAddress , tcpPort )\n        socket:setReadTimeout( 10000 )\n    end )  \nif status ~= nil and status ~= true then\n    Trace( \"socket status: \" .. tostring( status or \"\" ) )\nend\n\nif err ~= nil then\n    Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'SCK ERROR' )\nelse\n    local bytes, errCode, rdata\n\n    bytes, errCode = socket:write(funcCmd)\n    if errCode == 0 then\n        Trace( 'socket write [' .. funcCmd .. '] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n        rdata, errCode = socket:read()\n        if errCode == 0 then\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            bytes, errCode = socket:write('exit')\n            if errCode == 0 then\n                Trace( 'socket write [exit] result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n            else\n                Trace( \"socket write cmd [exit] error with code \" .. errCode, _ERROR )\n            end\n        else\n            Trace( \"socket read error with code \" .. errCode, _ERROR )\n        end\n    else\n        Trace( \"socket write cmd [\" .. funcCmd .. \"] error with code \" .. errCode, _ERROR )\n    end\nend\n\n--fibaro:sleep( 3000 )\n--fibaro:call( selfID , \"pressButton\" , mSyncButton )\n\n-- set VD Idle\n--fibaro:setGlobal( gIsBusy , \"false\" )\n--Trace( 'VD set Idle' )\n\n", 
            "main": false, 
            "id": 110, 
            "empty": false
          }
        ], 
        "type": "button"
      }
    ], 
    "log": "", 
    "deviceIcon": 0, 
    "ip": "192.168.1.71:8:100", 
    "currentIcon": "0", 
    "logTemp": "", 
    "visible": "true", 
    "mainLoop": "", 
    "port": 8080
  }, 
  "visible": true, 
  "sortOrder": 229, 
  "type": "virtual_device", 
  "id": 1241
}